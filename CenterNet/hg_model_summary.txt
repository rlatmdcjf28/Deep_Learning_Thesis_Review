IF -> n = 3, dims = [32, 64, 128], modules = [1, 2, 3] 일 때
torchsummary로 살펴보면 다음과 같음 : 
-----------------------------------------------------------------
        Layer (type)               Output Shape         Param # |
=================================================================
            Conv2d-1           [-1, 32, 64, 64]           9,216 |
       BatchNorm2d-2           [-1, 32, 64, 64]              64 |
              ReLU-3           [-1, 32, 64, 64]               0 |
            Conv2d-4           [-1, 32, 64, 64]           9,216 | -> up1 # curr_dim = 32, curr_mod = 1 (repeat once)
       BatchNorm2d-5           [-1, 32, 64, 64]              64 |          => output.shape = (32, 64, 64) 
              ReLU-6           [-1, 32, 64, 64]               0 |
          residual-7           [-1, 32, 64, 64]               0 |
-----------------------------------------------------------------
         MaxPool2d-8           [-1, 32, 32, 32]               0 | -> max1 
-----------------------------------------------------------------
            Conv2d-9           [-1, 64, 32, 32]          18,432 |
      BatchNorm2d-10           [-1, 64, 32, 32]             128 |
             ReLU-11           [-1, 64, 32, 32]               0 |
           Conv2d-12           [-1, 64, 32, 32]          36,864 |
      BatchNorm2d-13           [-1, 64, 32, 32]             128 | -> low1 # curr_dim = 32, next_dim = 64, curr_mod = 1 (repeat once)
           Conv2d-14           [-1, 64, 32, 32]           2,048 |           => output.shape = (64, 32, 32)
      BatchNorm2d-15           [-1, 64, 32, 32]             128 |
             ReLU-16           [-1, 64, 32, 32]               0 |
         residual-17           [-1, 64, 32, 32]               0 |
-----------------------------------------------------------------
           Conv2d-18           [-1, 64, 32, 32]          36,864 |
      BatchNorm2d-19           [-1, 64, 32, 32]             128 |
             ReLU-20           [-1, 64, 32, 32]               0 |
           Conv2d-21           [-1, 64, 32, 32]          36,864 |
      BatchNorm2d-22           [-1, 64, 32, 32]             128 |
             ReLU-23           [-1, 64, 32, 32]               0 |
         residual-24           [-1, 64, 32, 32]               0 | -> low2 - up1 # n = 2-1, dims = dims[1:], modules = modules[1:]
           Conv2d-25           [-1, 64, 32, 32]          36,864 |                 curr_dim = 64, curr_mod = 2 (repeat twice)
      BatchNorm2d-26           [-1, 64, 32, 32]             128 |                 => output.shape = (64, 32, 32)
             ReLU-27           [-1, 64, 32, 32]               0 |
           Conv2d-28           [-1, 64, 32, 32]          36,864 |
      BatchNorm2d-29           [-1, 64, 32, 32]             128 |
             ReLU-30           [-1, 64, 32, 32]               0 |
         residual-31           [-1, 64, 32, 32]               0 |
-----------------------------------------------------------------
        MaxPool2d-32           [-1, 64, 16, 16]               0 | -> low2 - max1
-----------------------------------------------------------------
           Conv2d-33          [-1, 128, 16, 16]          73,728 |
      BatchNorm2d-34          [-1, 128, 16, 16]             256 |
             ReLU-35          [-1, 128, 16, 16]               0 |
           Conv2d-36          [-1, 128, 16, 16]         147,456 |
      BatchNorm2d-37          [-1, 128, 16, 16]             256 |
           Conv2d-38          [-1, 128, 16, 16]           8,192 |
      BatchNorm2d-39          [-1, 128, 16, 16]             256 |
             ReLU-40          [-1, 128, 16, 16]               0 | -> low2 - low1 # curr_dim = 64, next_dim = 128, curr_mod = 2
         residual-41          [-1, 128, 16, 16]               0 |                  => output.shape = (128, 16, 16)
           Conv2d-42          [-1, 128, 16, 16]         147,456 |
      BatchNorm2d-43          [-1, 128, 16, 16]             256 |
             ReLU-44          [-1, 128, 16, 16]               0 |
           Conv2d-45          [-1, 128, 16, 16]         147,456 |
      BatchNorm2d-46          [-1, 128, 16, 16]             256 |
             ReLU-47          [-1, 128, 16, 16]               0 |
         residual-48          [-1, 128, 16, 16]               0 |
-----------------------------------------------------------------
           Conv2d-49          [-1, 128, 16, 16]         147,456 |
      BatchNorm2d-50          [-1, 128, 16, 16]             256 |
             ReLU-51          [-1, 128, 16, 16]               0 |
           Conv2d-52          [-1, 128, 16, 16]         147,456 |
      BatchNorm2d-53          [-1, 128, 16, 16]             256 |
             ReLU-54          [-1, 128, 16, 16]               0 |
         residual-55          [-1, 128, 16, 16]               0 |
           Conv2d-56          [-1, 128, 16, 16]         147,456 |
      BatchNorm2d-57          [-1, 128, 16, 16]             256 |
             ReLU-58          [-1, 128, 16, 16]               0 |
           Conv2d-59          [-1, 128, 16, 16]         147,456 | -> low2 - low2 # next_dim = 128, curr_mod = 2
      BatchNorm2d-60          [-1, 128, 16, 16]             256 |                  => output.shape = (128, 16, 16)
             ReLU-61          [-1, 128, 16, 16]               0 |
         residual-62          [-1, 128, 16, 16]               0 |
           Conv2d-63          [-1, 128, 16, 16]         147,456 |
      BatchNorm2d-64          [-1, 128, 16, 16]             256 |
             ReLU-65          [-1, 128, 16, 16]               0 |
           Conv2d-66          [-1, 128, 16, 16]         147,456 |
      BatchNorm2d-67          [-1, 128, 16, 16]             256 |
             ReLU-68          [-1, 128, 16, 16]               0 |
         residual-69          [-1, 128, 16, 16]               0 |
           Conv2d-70          [-1, 128, 16, 16]         147,456 |
      BatchNorm2d-71          [-1, 128, 16, 16]             256 |
             ReLU-72          [-1, 128, 16, 16]               0 |
           Conv2d-73          [-1, 128, 16, 16]         147,456 |
      BatchNorm2d-74          [-1, 128, 16, 16]             256 |
             ReLU-75          [-1, 128, 16, 16]               0 |
         residual-76          [-1, 128, 16, 16]               0 |
-----------------------------------------------------------------
           Conv2d-77           [-1, 64, 16, 16]          73,728 |
      BatchNorm2d-78           [-1, 64, 16, 16]             128 |
             ReLU-79           [-1, 64, 16, 16]               0 |
           Conv2d-80           [-1, 64, 16, 16]          36,864 |
      BatchNorm2d-81           [-1, 64, 16, 16]             128 | -> low2 - low3 # next_dim = 128, curr_dim = 64, curr_mod = 2
           Conv2d-82           [-1, 64, 16, 16]           8,192 |                  => output.shape = (64, 16, 16)
      BatchNorm2d-83           [-1, 64, 16, 16]             128 |
             ReLU-84           [-1, 64, 16, 16]               0 |
         residual-85           [-1, 64, 16, 16]               0 |
-----------------------------------------------------------------
         Upsample-86           [-1, 64, 32, 32]               0 | -> low2 - up2 # output.shape = (64, 32, 32)
-----------------------------------------------------------------
        kp_module-87           [-1, 64, 32, 32]               0 | -> low2 - merge(low2-up1 + low2-up2)
-----------------------------------------------------------------
           Conv2d-88           [-1, 32, 32, 32]          18,432 |
      BatchNorm2d-89           [-1, 32, 32, 32]              64 |
             ReLU-90           [-1, 32, 32, 32]               0 |
           Conv2d-91           [-1, 32, 32, 32]           9,216 |
      BatchNorm2d-92           [-1, 32, 32, 32]              64 | -> low3 # next_dim = 64, curr_dim = 32, curr_mod = 1
           Conv2d-93           [-1, 32, 32, 32]           2,048 |           => output.shape = (32, 32, 32)
      BatchNorm2d-94           [-1, 32, 32, 32]              64 |
             ReLU-95           [-1, 32, 32, 32]               0 |
         residual-96           [-1, 32, 32, 32]               0 |
-----------------------------------------------------------------
         Upsample-97           [-1, 32, 64, 64]               0 | -> up2 # output.shape = (32, 64, 64) => hourglass model의 입력과 동일
-----------------------------------------------------------------         
          MergeUp-99           [-1, 32, 64, 64]               0 | -> merge # output.shape = (32, 64, 64) => hourglass model의 입력과 Merge
=================================================================
Total params: 2,080,576
Trainable params: 2,080,576
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.50
Forward/backward pass size (MB): 35.25
Params size (MB): 7.94
Estimated Total Size (MB): 43.69
----------------------------------------------------------------
